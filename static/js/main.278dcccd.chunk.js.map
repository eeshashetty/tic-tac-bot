{"version":3,"sources":["patterns.js","minimax.js","tictactoe.js","App.js","serviceWorker.js","index.js"],"names":["check","grid","i","console","log","res","module","exports","checkscore","value","full","filter","val","length","require","minimax","board","depth","maxMode","alpha","beta","gameOver","bestVal","Infinity","Math","max","min","bestMove","moveVal","Grid","x","result","pattern","handleClick","Finish","className","map","onClick","gridClass","includes","TicTacToe","state","bind","onReset","updateBot","checkRes","newGrid","this","pos","setState","Component","Display","href","target","rel","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.278dcccd.chunk.js","sourcesContent":["function check(grid) {\n    for(let i = 0; i<=6; i+=3)\n    {\n        if(grid[i]===grid[i+1] && grid[i+1]===grid[i+2])\n        return {'res': grid[i], 'pattern':[i,i+1,i+2]}\n\n    }\n\n    for(let i = 0; i<3; i++)\n    {\n        if(grid[i]===grid[i+3] && grid[i+3]===grid[i+6])\n        return {'res': grid[i], 'pattern':[i,i+3,i+6]}\n\n    }\n\n    if(grid[0]==grid[4] && grid[4]==grid[8]) {\n        return {'res': grid[0], 'pattern': [0,4,8]}\n    }\n\n    if(grid[2]==grid[4] && grid[4]==grid[6]) {\n        return {'res': grid[2], 'pattern': [2,4,6]}\n    }\n\n    return {'res': 'D', 'pattern': []}\n}\n\nfunction checkscore(grid) {\n    let value = 0\n    let full = grid.filter(val => val===\"\").length === 0\n\n    if (check(grid).res === 'X') {\n        value = -10\n    }\n    if (check(grid).res === 'D' && full) {\n        value = 1\n    }\n\n    if (check(grid).res === 'O') {\n        value = 10\n    }\n\n    return value\n\n}\n\nconsole.log(check(['X','','O','X','O','','O','','']).res)\n\nmodule.exports = {check, checkscore}","const { checkscore } = require('./patterns')\n\n\nfunction gameOver(board) {\n    for (let i in board) {\n        if (board[i] === \"\") { return false }\n    }\n    return true\n}\n\nfunction minimax(board, depth, maxMode, alpha, beta) {\n    let value = checkscore(board)\n    \n    if (value === 10 || value === -10) {\n        return value\n    }\n\n    if (gameOver(board) === true) {\n        return 0\n    }\n\n    if (maxMode) {\n        let bestVal = -Infinity\n        for (let i = 0; i < board.length; i++) {\n            if (board[i] === \"\") {\n                board[i] = \"O\"\n                value = minimax(board, depth + 1, false)\n                bestVal = Math.max(bestVal, value)\n                board[i] = \"\"\n            }\n        }\n\n        return bestVal\n    }\n\n    else {\n        let bestVal = Infinity\n        for (let i = 0; i < board.length; i++) {\n            if (board[i] === \"\") {\n                board[i] = \"X\"\n                value = minimax(board, depth + 1, true)\n                bestVal = Math.min(bestVal, value)\n                beta = Math.min(beta, bestVal)\n                board[i] = \"\"\n            }\n        }\n\n        return bestVal\n    }\n}\n\nfunction bestMove(board) {\n    let bestVal = -Infinity\n    let bestMove = -1\n    let moveVal = -Infinity\n\n    for (let i = 0; i < board.length; i++) {\n    if (board[i] === \"\") {\n\n        board[i] = \"O\"\n        moveVal = minimax(board, 0, false)\n        board[i] = \"\"\n        if (moveVal > bestVal) {\n            bestVal = moveVal\n            bestMove = i\n        }\n\n        }\n    }\n\n    console.log(`Best Move is to Position ${bestMove}`)\n    console.log(`Value =  ${bestVal}`)\n\n    return bestMove\n}\n\nbestMove([\"X\", \"\", \"O\", \"\", \"X\", \"\", \"\", \"\", \"\"])\nmodule.exports = bestMove","import React, {Component} from 'react';\nimport './tictactoe.css';\nvar { check } =  require(\"./patterns\")\nvar bestMove = require(\"./minimax\")\n\nclass TicTacToe extends Component {\n    constructor() {\n      super()\n      this.state = { grid: [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"], x: true, full: false, result: null, pattern: null };\n      this.handleClick = this.handleClick.bind(this);\n      this.onReset = this.onReset.bind(this);\n      this.updateBot = this.updateBot.bind(this);\n      this.checkRes = this.checkRes.bind(this);\n    }\n\n    updateBot() {\n      let newGrid = [...this.state.grid]\n      let pos = bestMove(newGrid)\n      console.log(\"*\")\n      newGrid[pos] = 'O'\n      let full = this.checkRes(newGrid)\n      this.setState({grid: newGrid, x: true, full: full})\n    }\n\n    checkRes(grid = this.state.grid) {\n      let full = grid.filter(val => val===\"\").length === 0\n      \n      let {res, pattern} = check(grid)\n     \n      if(res === 'X') {\n        this.setState({result: 'X', pattern: pattern}) \n      }\n      if(res === 'O') {\n        this.setState({result: 'O', pattern: pattern}) \n      }\n      if(res === 'D' && full===true) {\n        this.setState({result: 'D'}) \n      }\n       return full\n    }\n\n    handleClick(pos) {\n      if (this.state.grid[pos]===\"\" && this.state.result===null) {\n      \n      let val = this.state.x?'X':'O'\n      \n      let grid = this.state.grid\n      grid[pos] = val\n      \n      let full = this.checkRes()\n      this.setState({grid: grid, x:!this.state.x, full: full})\n      console.log({grid: grid, x:!this.state.x, full: full})\n      this.updateBot()\n     }\n\n\n    }\n\n    onReset() {\n      this.setState({ grid: [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"], x: true, full: false, result: null, pattern: null })\n    }\n\n    render () {\n      return (\n        <div className=\"fix-grid\">\n        <Grid x = {this.state.x} result={this.state.result} grid={this.state.grid} pattern={this.state.pattern} handleClick={this.handleClick}/>\n        <button className=\"reset\" onClick={this.onReset}>RESET</button>\n        </div>\n    );\n  }\n}\n\n\nfunction Grid({ x, result, grid, pattern, handleClick}) {\n  if(result === null)\n  {\n    return (\n      <div>\n        <center><Finish result={\"\"} /></center>\n      <div className=\"grid-container\">\n      {\n        grid.map((val, i) => {\n          return (\n          <div className=\"grid-item hover\" onClick={() => handleClick(i)}>{grid[i]===\"O\"?\"🤖\":(grid[i]===\"X\"?\"🤸‍♀️\":grid[i])}</div>\n          );\n        })\n      }\n      </div>\n      </div>\n    )\n  }\n\n  return (\n    <div>\n    <center><Finish result={result} /></center>\n    <div className=\"grid-container\">\n    {\n      grid.map((val, i) => {\n        let gridClass = \"grid-item\"\n        if(pattern!=null && pattern.includes(i)){\n          gridClass = \"gsel\"\n        }\n        \n        return(\n          <div className={gridClass} onClick={() => handleClick(i)}>{grid[i]===\"O\"?\"🤖\":(grid[i]===\"X\"?\"🤸‍♀️\":grid[i])}</div>\n        );\n      })\n    }\n    </div>\n    </div>\n  );\n}\n\n\nfunction Finish({ result }) {\n  if(result === '')\n  {\n    return(<h1 className=\"hide\">Bla</h1>)\n  }\n\n  if(result === 'D')\n  {\n    return(<h1 className=\"over\">Draw!</h1>)\n  }\n\n  if(result === 'X')\n  {\n    return(<h1 className=\"over\">You Win</h1>)\n  }\n\n  if(result === 'O')\n  {\n    return(<h1 className=\"over\">Bot Wins!</h1>)\n  }\n}\n\nexport default TicTacToe;","import React, { Component } from 'react';\nimport TicTacToe from './tictactoe';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n  return (\n    <div className=\"App\">\n      <TicTacToe/>\n      <Display />\n      </div>\n  );\n}\n}\nfunction Display () {\n    return (\n      <div className=\"display\">\n      <div className=\"header\">\n        Tic-Tac-🤖\n      </div>  \n      <div className=\"links\">by <a href=\"https://eeshashetty.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">@eeshashetty</a></div>\n      </div>\n    );\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}