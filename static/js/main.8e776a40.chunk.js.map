{"version":3,"sources":["patterns.js","minimax.js","tictactoe.js","App.js","serviceWorker.js","index.js"],"names":["patterns","checkpattern","pattern","length","iLen","i","j","k","pat","match","filter","p","JSON","stringify","check","grid","patX","patO","pos","push","matchX","matchO","res","module","exports","checkscore","value","require","minimax","board","depth","maxMode","gameOver","bestVal","Infinity","Math","max","min","bestMove","moveVal","Grid","x","result","handleClick","Finish","className","map","val","onClick","gridClass","includes","TicTacToe","state","full","bind","onReset","updateBot","checkRes","newGrid","this","setState","console","log","class","Component","Display","href","target","rel","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8e776a40.chunk.js","sourcesContent":["const patterns = [[0,1,2], [3,4,5], [6,7,8], [0,3,6], [1,4,7], [2,5,8], [0,4,8], [2,4,6]]\n\nfunction checkpattern(pattern) {\n    if(pattern.length<3)\n    { return false; }\n    let iLen = 0\n    if(pattern.length<6)\n    {iLen = pattern.length%3}\n    else \n    {iLen = pattern.length - (pattern.length%3)*3 }\n    \n    for(let i = 0; i <= iLen; i++)\n    {   for(let j = i+1; j <= pattern.length - (pattern.length%2)*2; j++)\n            {   for(let k = j+1; k < pattern.length; k++)\n                    {   \n                        let pat = [pattern[i], pattern[j], pattern[k]]\n                        let match =  patterns.filter(p => JSON.stringify(p) === JSON.stringify(pat))\n                        if(match.length>0)\n                        { return match }\n                    }\n                \n            }\n    }\n    return []\n}\n\nfunction check(grid) {\n    let patX = []\n    let patO = []\n    for(let pos = 0; pos < grid.length; pos++) {\n        if(grid[pos]===\"X\") {\n            patX.push(pos)\n        }\n        if(grid[pos]===\"O\") {\n            patO.push(pos)\n        }\n    }\n        let matchX = checkpattern(patX)\n        let matchO = checkpattern(patO)\n       \n        if(matchX.length>0)\n        {return {res: 'X', pattern: matchX[0]}}\n\n        if(matchO.length>0)\n        {return {res: 'O', pattern: matchO[0]}}\n    \n\n    return {res: 'D', pattern: []}\n}\n\nfunction checkscore(grid) {\n    let value = 0\n\n    if (check(grid).res === 'X') {\n        value = -10\n    }\n    \n    if (check(grid).res === 'O') {\n        value = 10\n    }\n\n    return value\n\n}\n\nmodule.exports = {check, checkscore}","const { checkscore } = require('./patterns')\n\n\nfunction gameOver(board) {\n    for(let i in board) {\n        if(board[i] === \"\")\n        {return false}\n    }\n    return true\n}\n\nfunction minimax(board, depth, maxMode)\n{   \n    let value = checkscore(board)\n    \n    if (value === 10 || value === -10) {\n        return value\n    }\n\n    if (gameOver(board) === true) {\n        return 0\n    }\n\n    if(maxMode) {\n        let bestVal = -Infinity\n        for(let i = 0; i < board.length; i++) {\n            if ( board[i] === \"\") {\n                board[i] = \"O\"\n                value = minimax(board, depth+1, false)\n                bestVal = Math.max(bestVal, value)\n                board[i] = \"\"\n            }\n        }\n\n        return bestVal\n    }\n\n    else {\n        let bestVal = Infinity\n        for(let i = 0; i< board.length; i++) {\n            if( board[i] === \"\" ) {\n                board[i] = \"X\"\n                value = minimax(board, depth+1, true)\n                bestVal = Math.min(bestVal, value)\n                board[i] = \"\"\n            }\n        }\n\n        return bestVal\n    }\n}\n\nfunction bestMove(board) {\n    let bestVal = -Infinity\n    let bestMove = -1\n    let moveVal = -Infinity\n    \n    for(let i = 0; i < board.length; i++) {\n        \n        if(board[i] !== \"\")\n        { continue }\n        \n        board[i] = \"O\"\n        moveVal = minimax(board, 0, false)\n        board[i] = \"\"\n        if(moveVal > bestVal)\n        {\n            bestVal = moveVal\n            bestMove = i\n        }\n\n                \n    }\n\n    // console.log(`Best Move is to Position ${bestMove}`)\n    // console.log(`Value =  ${bestVal}`)\n\n    return bestMove\n}\n\n\nmodule.exports = bestMove","import React, {Component} from 'react';\nimport './tictactoe.css';\nvar { check } =  require(\"./patterns\")\nvar bestMove = require(\"./minimax\")\n\nclass TicTacToe extends Component {\n    constructor() {\n      super()\n      this.state = { grid: [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"], x: true, full: false, result: null, pattern: null };\n      this.handleClick = this.handleClick.bind(this);\n      this.onReset = this.onReset.bind(this);\n      this.updateBot = this.updateBot.bind(this);\n      this.checkRes = this.checkRes.bind(this);\n    }\n\n    updateBot() {\n      let newGrid = [...this.state.grid]\n      let pos = bestMove(newGrid)\n      newGrid[pos] = 'O'\n      let full = this.checkRes(newGrid)\n      this.setState({grid: newGrid, x: true, full: full})\n    }\n\n    checkRes(grid = this.state.grid) {\n      let full = grid.filter(val => val===\"\").length === 0\n      \n      let {res, pattern} = check(grid)\n     \n      if(res === 'X') {\n        this.setState({result: 'X', pattern: pattern}) \n      }\n      if(res === 'O') {\n        this.setState({result: 'O', pattern: pattern}) \n      }\n      if(res === 'D' && full===true) {\n        this.setState({result: 'D'}) \n      }\n       return full\n    }\n\n    handleClick(pos) {\n      if (this.state.grid[pos]===\"\" && this.state.result===null) {\n      let val = this.state.x?'X':'O'\n      \n      let grid = this.state.grid\n      grid[pos] = val\n      \n      let full = this.checkRes()\n      this.setState({grid: grid, x:!this.state.x, full: full})\n      console.log({grid: grid, x:!this.state.x, full: full})\n      this.updateBot()\n     }\n\n\n    }\n\n    onReset() {\n      this.setState({ grid: [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"], x: true, full: false, result: null, pattern: null })\n    }\n\n    render () {\n      return (\n        <div className=\"fix-grid\">\n        <Grid x = {this.state.x} result={this.state.result} grid={this.state.grid} pattern={this.state.pattern} handleClick={this.handleClick}/>\n        <button class=\"reset\" onClick={this.onReset}>RESET</button>\n        </div>\n    );\n  }\n}\n\n\nfunction Grid({ x, result, grid, pattern, handleClick}) {\n  if(result === null)\n  {\n    return (\n      <div>\n        <center><Finish result={\"\"} /></center>\n      <div className=\"grid-container\">\n      {\n        grid.map((val, i) => {\n          return (\n          <div className=\"grid-item hover\" onClick={() => handleClick(i)}>{grid[i]===\"O\"?\"🤖\":(grid[i]===\"X\"?\"🤸‍♀️\":grid[i])}</div>\n          );\n        })\n      }\n      </div>\n      </div>\n    )\n  }\n\n  return (\n    <div>\n    <center><Finish result={result} /></center>\n    <div className=\"grid-container\">\n    {\n      grid.map((val, i) => {\n        let gridClass = \"grid-item\"\n        if(pattern!=null && pattern.includes(i)){\n          gridClass = \"gsel\"\n        }\n        \n        return(\n          <div className={gridClass} onClick={() => handleClick(i)}>{grid[i]===\"O\"?\"🤖\":(grid[i]===\"X\"?\"🤸‍♀️\":grid[i])}</div>\n        );\n      })\n    }\n    </div>\n    </div>\n  );\n}\n\n\nfunction Finish({ result }) {\n  if(result === '')\n  {\n    return(<h1 className=\"hide\">Bla</h1>)\n  }\n\n  if(result === 'D')\n  {\n    return(<h1 className=\"over\">Draw!</h1>)\n  }\n\n  if(result === 'X')\n  {\n    return(<h1 className=\"over\">You Win</h1>)\n  }\n\n  if(result === 'O')\n  {\n    return(<h1 className=\"over\">Bot Wins!</h1>)\n  }\n}\n\nexport default TicTacToe;","import React, { Component } from 'react';\nimport TicTacToe from './tictactoe';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n  return (\n    <div className=\"App\">\n      <TicTacToe/>\n      <Display />\n      </div>\n  );\n}\n}\nfunction Display () {\n    return (\n      <div className=\"display\">\n      <div className=\"header\">\n        Tic-Tac-🤖\n      </div>  \n      <div className=\"links\">by <a href=\"https://eeshashetty.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">@eeshashetty</a></div>\n      <div className=\"msg\">~ the first move takes a while to load, pls bear with it ~</div>\n      </div>\n    );\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}